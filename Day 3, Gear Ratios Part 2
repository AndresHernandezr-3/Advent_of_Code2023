# Read the uploaded file and create a matrix
file_path = 'gearinput.txt'

with open(file_path, 'r') as file:
    matrix = [list(line.strip()) for line in file.readlines()]

# Verify that the matrix has the correct dimensions (140x140) and characters
is_valid_matrix = all(len(line) == 140 for line in matrix) and len(matrix) == 140
is_valid_matrix, len(matrix), len(matrix[0]) if matrix else 0

# Define the target symbols
target_symbols = {"*"}

# Function to get adjacent cells (including diagonals) for a given row and column
def get_adjacent_cells(matrix, row, col):
    adjacent_cells = []

    # Check all eight directions (up, down, left, right, and diagonals)
    for dr in [-1, 0, 1]:
        for dc in [-1, 0, 1]:
            if dr == 0 and dc == 0:
                continue
            new_row, new_col = row + dr, col + dc
            if 0 <= new_row < len(matrix) and 0 <= new_col < len(matrix[0]):
                adjacent_cells.append((new_row, new_col))
    return adjacent_cells

# Modified function to find and multiply numbers
def find_and_multiply_numbers(matrix, target_symbols):
    visited = set()  # To track visited cells
    total_product_sum = 0

    def get_number(row, col):
        """Recursive function to find the complete number starting from (row, col)."""
        if (row, col) in visited or not matrix[row][col].isdigit():
            return ''
        visited.add((row, col))
        number = matrix[row][col]

        # Check adjacent cells horizontally and vertically
        if col > 0:
            number = get_number(row, col - 1) + number
        if col < len(matrix[row]) - 1:
            number += get_number(row, col + 1)
        if row > 0:
            number = get_number(row - 1, col) + number
        if row < len(matrix) - 1:
            number += get_number(row + 1, col)

        return number

    # Iterate through the matrix and multiply numbers adjacent to target symbols
    for row_index, row in enumerate(matrix):
        for col_index, value in enumerate(row):
            if value in target_symbols:
                adjacent_cells = get_adjacent_cells(matrix, row_index, col_index)
                numbers = []
                for adj_row, adj_col in adjacent_cells:
                    if matrix[adj_row][adj_col].isdigit() and (adj_row, adj_col) not in visited:
                        num = get_number(adj_row, adj_col)
                        if num:
                            numbers.append(int(num))
                
                # Check if exactly two numbers are adjacent and multiply them
                if len(numbers) == 2:
                    total_product_sum += numbers[0] * numbers[1]

    return total_product_sum


# Use the function to find and sum the numbers
total_sum = find_and_multiply_numbers(matrix, target_symbols)
print(total_sum)
